{
    "$schema":  "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion":  "1.0.0.0",
    "parameters":  {
        "PlaybookName":  {
            "defaultValue":  "Codemotion_demo_SOAR",
            "type":  "string"
        }
    },
    "variables":  {
        "teamsConnectionName":  "[concat('teams-', parameters('PlaybookName'))]",
        "azuremonitorlogsConnectionName":  "[concat('azuremonitorlogs-', parameters('PlaybookName'))]",
        "azureadConnectionName":  "[concat('azuread-', parameters('PlaybookName'))]",
        "officeConnectionName":  "[concat('office-', parameters('PlaybookName'))]",
        "azureloganalyticsdatacollectorConnectionName":  "[concat('azureloganalyticsdatacollector-', parameters('PlaybookName'))]",
        "azuresentinelConnectionName":  "[concat('azuresentinel-', parameters('PlaybookName'))]",
        "servicenowConnectionName":  "[concat('servicenow-', parameters('PlaybookName'))]"
    },
    "metadata":  {
        "prerequisitesDeployTemplateFile":  "",
        "description":  "",
        "lastUpdateTime":  "",
        "tags":  [
        ],
        "prerequisites":  "",
        "support":  {
            "tier":  "community"
        },
        "author":  {
            "name":  ""
        },
        "title":  "",
        "entities":  [
        ]
    },
    "resources":  [
        {
            "properties":  {
                "provisioningState":  "Succeeded",
                "state":  "Enabled",
                "definition":  {
                    "$schema":  "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                    "contentVersion":  "1.0.0.0",
                    "parameters":  {
                        "$connections":  {
                            "defaultValue":  {
                            },
                            "type":  "Object"
                        }
                    },
                    "triggers":  {
                        "When_a_response_to_an_Azure_Sentinel_alert_is_triggered":  {
                            "type":  "ApiConnectionWebhook",
                            "inputs":  {
                                "body":  {
                                    "callback_url":  "@{listCallbackUrl()}"
                                },
                                "host":  {
                                    "connection":  {
                                        "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "path":  "/subscribe"
                            }
                        }
                    },
                    "actions":  {
                        "Alert_-_Get_incident":  {
                            "runAfter":  {
                                "Initialize_variable":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "ApiConnection",
                            "inputs":  {
                                "host":  {
                                    "connection":  {
                                        "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method":  "get",
                                "path":  "/Incidents/subscriptions/@{encodeURIComponent(triggerBody()?['WorkspaceSubscriptionId'])}/resourceGroups/@{encodeURIComponent(triggerBody()?['WorkspaceResourceGroup'])}/workspaces/@{encodeURIComponent(triggerBody()?['WorkspaceId'])}/alerts/@{encodeURIComponent(triggerBody()?['SystemAlertId'])}"
                            }
                        },
                        "Alert_Enrichment_from_GreyNoise":  {
                            "foreach":  "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions":  {
                                "Add_comment_to_incident_(V3)_3":  {
                                    "runAfter":  {
                                        "Parse_JSON_to_get_GreyNoise_response":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "type":  "ApiConnection",
                                    "inputs":  {
                                        "body":  {
                                            "incidentArmId":  "@body('Alert_-_Get_incident')?['id']",
                                            "message":  "\u003cp\u003eGreyNoise report for @{items('Alert_Enrichment_from_GreyNoise')?['Address']}\u003cbr\u003e\nClassification: @{body('Parse_JSON_to_get_GreyNoise_response')?['classification']}\u003cbr\u003e\nName:@{body('Parse_JSON_to_get_GreyNoise_response')?['name']}\u003cbr\u003e\nLink to GreiNoise:@{body('Parse_JSON_to_get_GreyNoise_response')?['link']}\u003cbr\u003e\nLast Seen:@{body('Parse_JSON_to_get_GreyNoise_response')?['last_seen']}\u003cbr\u003e\nNoise:@{body('Parse_JSON_to_get_GreyNoise_response')?['noise']}\u003c/p\u003e"
                                        },
                                        "host":  {
                                            "connection":  {
                                                "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                            }
                                        },
                                        "method":  "post",
                                        "path":  "/Incidents/Comment"
                                    }
                                },
                                "Alert_Encrichment_from_Greynoise":  {
                                    "runAfter":  {
                                    },
                                    "type":  "Http",
                                    "inputs":  {
                                        "method":  "GET",
                                        "uri":  "https://api.greynoise.io/v3/community/@{items('Alert_Enrichment_from_GreyNoise')?['Address']}"
                                    }
                                },
                                "Parse_JSON_to_get_GreyNoise_response":  {
                                    "runAfter":  {
                                        "Alert_Encrichment_from_Greynoise":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "type":  "ParseJson",
                                    "inputs":  {
                                        "content":  "@body('Alert_Encrichment_from_Greynoise')",
                                        "schema":  {
                                            "properties":  {
                                                "classification":  {
                                                    "type":  "string"
                                                },
                                                "ip":  {
                                                    "type":  "string"
                                                },
                                                "last_seen":  {
                                                    "type":  "string"
                                                },
                                                "link":  {
                                                    "type":  "string"
                                                },
                                                "message":  {
                                                    "type":  "string"
                                                },
                                                "name":  {
                                                    "type":  "string"
                                                },
                                                "noise":  {
                                                    "type":  "boolean"
                                                },
                                                "riot":  {
                                                    "type":  "boolean"
                                                }
                                            },
                                            "type":  "object"
                                        }
                                    }
                                }
                            },
                            "runAfter":  {
                                "Entities_-_Get_IPs":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "Foreach"
                        },
                        "Alert_Enrichment_from_VirusTotal":  {
                            "foreach":  "@body('Entities_-_Get_IPs')?['IPs']",
                            "actions":  {
                                "Condition":  {
                                    "actions":  {
                                        "Add_comment_to_incident_(V3)":  {
                                            "runAfter":  {
                                                "Send_Data":  [
                                                    "Succeeded"
                                                ]
                                            },
                                            "type":  "ApiConnection",
                                            "inputs":  {
                                                "body":  {
                                                    "incidentArmId":  "@body('Alert_-_Get_incident')?['id']",
                                                    "message":  "\u003cp\u003eVTIPReport found for @{items('Alert_Enrichment_from_VirusTotal')?['Address']} , Query: VTIPReport_CL | where asn_d == \"@{body('Parse_JSON')?['asn']}\" and country_s == \"@{body('Parse_JSON')?['country']}\"\u003c/p\u003e"
                                                },
                                                "host":  {
                                                    "connection":  {
                                                        "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                },
                                                "method":  "post",
                                                "path":  "/Incidents/Comment"
                                            }
                                        },
                                        "Send_Data":  {
                                            "runAfter":  {
                                            },
                                            "type":  "ApiConnection",
                                            "inputs":  {
                                                "body":  "@{body('HTTP')}",
                                                "headers":  {
                                                    "Log-Type":  "VTIPReport",
                                                    "time-generated-field":  "@{utcNow()}"
                                                },
                                                "host":  {
                                                    "connection":  {
                                                        "name":  "@parameters('$connections')['azureloganalyticsdatacollector']['connectionId']"
                                                    }
                                                },
                                                "method":  "post",
                                                "path":  "/api/logs"
                                            }
                                        }
                                    },
                                    "runAfter":  {
                                        "Parse_JSON":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "else":  {
                                        "actions":  {
                                            "Add_comment_to_incident_(V3)_2":  {
                                                "runAfter":  {
                                                },
                                                "type":  "ApiConnection",
                                                "inputs":  {
                                                    "body":  {
                                                        "incidentArmId":  "incident @{body('Alert_-_Get_incident')?['id']}",
                                                        "message":  "\u003cp\u003eVTIPReport was not found for @{items('Alert_Enrichment_from_VirusTotal')?['Address']}\u003c/p\u003e"
                                                    },
                                                    "host":  {
                                                        "connection":  {
                                                            "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                                        }
                                                    },
                                                    "method":  "post",
                                                    "path":  "/Incidents/Comment"
                                                }
                                            }
                                        }
                                    },
                                    "expression":  {
                                        "and":  [
                                            {
                                                "equals":  [
                                                    "@body('Parse_JSON')?['schema']?['properties']?['response_code']",
                                                    1
                                                ]
                                            }
                                        ]
                                    },
                                    "type":  "If"
                                },
                                "HTTP":  {
                                    "runAfter":  {
                                    },
                                    "type":  "Http",
                                    "inputs":  {
                                        "method":  "GET",
                                        "uri":  "https://www.virustotal.com/vtapi/v2/ip-address/report?apikey=@{variables('API Key')}\u0026ip=@{items('Alert_Enrichment_from_VirusTotal')?['Address']}"
                                    }
                                },
                                "Parse_JSON":  {
                                    "runAfter":  {
                                        "HTTP":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "type":  "ParseJson",
                                    "inputs":  {
                                        "content":  "@body('HTTP')",
                                        "schema":  {
                                            "properties":  {
                                                "content":  {
                                                    "properties":  {
                                                        "as_owner":  {
                                                            "type":  "string"
                                                        },
                                                        "asn":  {
                                                            "type":  "integer"
                                                        },
                                                        "country":  {
                                                            "type":  "string"
                                                        },
                                                        "detected_downloaded_samples":  {
                                                            "type":  "array"
                                                        },
                                                        "detected_urls":  {
                                                            "items":  {
                                                                "properties":  {
                                                                    "positives":  {
                                                                        "type":  "integer"
                                                                    },
                                                                    "scan_date":  {
                                                                        "type":  "string"
                                                                    },
                                                                    "total":  {
                                                                        "type":  "integer"
                                                                    },
                                                                    "url":  {
                                                                        "type":  "string"
                                                                    }
                                                                },
                                                                "type":  "object"
                                                            },
                                                            "type":  "array"
                                                        },
                                                        "resolutions":  {
                                                            "items":  {
                                                                "properties":  {
                                                                    "hostname":  {
                                                                        "type":  "string"
                                                                    },
                                                                    "last_resolved":  {
                                                                        "type":  "string"
                                                                    }
                                                                },
                                                                "type":  "object"
                                                            },
                                                            "type":  "array"
                                                        },
                                                        "response_code":  {
                                                            "type":  "integer"
                                                        },
                                                        "undetected_downloaded_samples":  {
                                                            "type":  "array"
                                                        },
                                                        "undetected_urls":  {
                                                            "items":  {
                                                                "type":  "array"
                                                            },
                                                            "type":  "array"
                                                        },
                                                        "verbose_msg":  {
                                                            "type":  "string"
                                                        }
                                                    },
                                                    "type":  "object"
                                                },
                                                "schema":  {
                                                    "properties":  {
                                                        "properties":  {
                                                            "properties":  {
                                                                "asn":  {
                                                                    "properties":  {
                                                                        "type":  {
                                                                            "type":  "string"
                                                                        }
                                                                    },
                                                                    "type":  "object"
                                                                },
                                                                "country":  {
                                                                    "properties":  {
                                                                        "type":  {
                                                                            "type":  "string"
                                                                        }
                                                                    },
                                                                    "type":  "object"
                                                                },
                                                                "response_code":  {
                                                                    "properties":  {
                                                                        "type":  {
                                                                            "type":  "string"
                                                                        }
                                                                    },
                                                                    "type":  "object"
                                                                },
                                                                "verbose_msg":  {
                                                                    "properties":  {
                                                                        "type":  {
                                                                            "type":  "string"
                                                                        }
                                                                    },
                                                                    "type":  "object"
                                                                }
                                                            },
                                                            "type":  "object"
                                                        },
                                                        "type":  {
                                                            "type":  "string"
                                                        }
                                                    },
                                                    "type":  "object"
                                                }
                                            },
                                            "type":  "object"
                                        }
                                    }
                                }
                            },
                            "runAfter":  {
                                "Entities_-_Get_IPs":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "Foreach"
                        },
                        "Create_Record_-_Service_Now":  {
                            "runAfter":  {
                                "Alert_-_Get_incident":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "ApiConnection",
                            "inputs":  {
                                "body":  {
                                    "number":  "@body('Alert_-_Get_incident')?['name']",
                                    "severity":  "@body('Alert_-_Get_incident')?['properties']?['severity']",
                                    "short_description":  "@body('Alert_-_Get_incident')?['properties']?['description']"
                                },
                                "host":  {
                                    "connection":  {
                                        "name":  "@parameters('$connections')['service-now_1']['connectionId']"
                                    }
                                },
                                "method":  "post",
                                "path":  "/api/now/v2/table/@{encodeURIComponent('incident')}",
                                "queries":  {
                                    "sysparm_display_value":  false,
                                    "sysparm_exclude_reference_link":  true
                                }
                            }
                        },
                        "Entities_-_Get_Accounts":  {
                            "runAfter":  {
                                "Alert_-_Get_incident":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "ApiConnection",
                            "inputs":  {
                                "body":  "@triggerBody()?['Entities']",
                                "host":  {
                                    "connection":  {
                                        "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method":  "post",
                                "path":  "/entities/account"
                            }
                        },
                        "Entities_-_Get_IPs":  {
                            "runAfter":  {
                                "Alert_-_Get_incident":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "ApiConnection",
                            "inputs":  {
                                "body":  "@triggerBody()?['Entities']",
                                "host":  {
                                    "connection":  {
                                        "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                    }
                                },
                                "method":  "post",
                                "path":  "/entities/ip"
                            }
                        },
                        "For_each":  {
                            "foreach":  "@body('Entities_-_Get_Accounts')?['Accounts']",
                            "actions":  {
                                "If_request_approved":  {
                                    "actions":  {
                                        "Update_user":  {
                                            "runAfter":  {
                                            },
                                            "type":  "ApiConnection",
                                            "inputs":  {
                                                "body":  {
                                                    "accountEnabled":  false
                                                },
                                                "host":  {
                                                    "connection":  {
                                                        "name":  "@parameters('$connections')['azuread']['connectionId']"
                                                    }
                                                },
                                                "method":  "patch",
                                                "path":  "/v1.0/users/@{encodeURIComponent(concat(items('For_each')?['Name'], '@', items('for_each')?['UPNSuffix']))}"
                                            }
                                        }
                                    },
                                    "runAfter":  {
                                        "Send_approval_email":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression":  {
                                        "and":  [
                                            {
                                                "equals":  [
                                                    "@body('Send_approval_email')?['SelectedOption']",
                                                    "Approve"
                                                ]
                                            }
                                        ]
                                    },
                                    "type":  "If"
                                },
                                "Post_a_message_(V3)":  {
                                    "runAfter":  {
                                    },
                                    "type":  "ApiConnection",
                                    "inputs":  {
                                        "body":  {
                                            "body":  {
                                                "content":  "\u003cp\u003e\u003cspan style=\"font-size: 16px\"\u003e\u003cstrong\u003eNew Alert!\u003c/strong\u003e\u003c/span\u003e\u003cbr\u003e\n\u003cspan style=\"color: rgb(251,160,38)\"\u003e\u003cstrong\u003eName\u003c/strong\u003e\u003c/span\u003e: @{triggerBody()?['AlertDisplayName']}\u003cbr\u003e\n\u003cspan style=\"color: rgb(235,107,86)\"\u003e\u003cstrong\u003eSeverity\u003c/strong\u003e\u003c/span\u003e: @{body('Alert_-_Get_incident')?['properties']?['severity']}\u003cbr\u003e\n\u003cspan style=\"color: rgb(85,57,130)\"\u003e\u003cstrong\u003eUser:\u003c/strong\u003e\u003c/span\u003e\u003cspan style=\"color: rgb(85,57,130)\"\u003e\u003cstrong\u003e@{items('For_each')?['AadUserId']}\u003c/strong\u003e\u003c/span\u003e\u003cbr\u003e\n\u003cbr\u003e\n\u003cspan style=\"color: rgb(226,80,65)\"\u003e\u003cstrong\u003eENTITIES\u003c/strong\u003e\u003c/span\u003e: @{triggerBody()?['Entities']}\u003cbr\u003e\n\u003cbr\u003e\n\u003cspan style=\"color: rgb(40,50,78)\"\u003e\u003cstrong\u003eIncident URL\u003c/strong\u003e\u003c/span\u003e\u003cspan style=\"color: rgb(40,50,78)\"\u003e:\u003c/span\u003e@{body('Alert_-_Get_incident')?['properties']?['incidentUrl']}\u003cbr\u003e\n\u003c/p\u003e",
                                                "contentType":  "html"
                                            }
                                        },
                                        "host":  {
                                            "connection":  {
                                                "name":  "@parameters('$connections')['teams']['connectionId']"
                                            }
                                        },
                                        "method":  "post",
                                        "path":  "/v3/beta/teams/@{encodeURIComponent('8a056640-29c9-4586-bd5e-5d4589070146')}/channels/@{encodeURIComponent('19:6dd145fd15a54e5c924bffc84738c186@thread.tacv2')}/messages"
                                    }
                                },
                                "Send_approval_email":  {
                                    "runAfter":  {
                                        "Post_a_message_(V3)":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "type":  "ApiConnectionWebhook",
                                    "inputs":  {
                                        "body":  {
                                            "Message":  {
                                                "HideHTMLMessage":  false,
                                                "Importance":  "High",
                                                "Options":  "Approve, Reject",
                                                "ShowHTMLConfirmationDialog":  true,
                                                "Subject":  "Disable User: @{items('For_each')?['Name']}Approval Request",
                                                "To":  "antonio.formato@microsoft.com; rebecca.travasi@microsoft.com;\nrebecca.travasi@labformat.com"
                                            },
                                            "NotificationUrl":  "@{listCallbackUrl()}"
                                        },
                                        "host":  {
                                            "connection":  {
                                                "name":  "@parameters('$connections')['office365']['connectionId']"
                                            }
                                        },
                                        "path":  "/approvalmail/$subscriptions"
                                    }
                                }
                            },
                            "runAfter":  {
                                "Entities_-_Get_Accounts":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "Foreach"
                        },
                        "Initialize_variable":  {
                            "runAfter":  {
                            },
                            "type":  "InitializeVariable",
                            "inputs":  {
                                "variables":  [
                                    {
                                        "name":  "API Key",
                                        "type":  "string",
                                        "value":  "3d13bb4ca9e563603d915347e62124204b8145b36807905f644e2180e9ceea74"
                                    }
                                ]
                            }
                        },
                        "Update_severity_if_VIP_user":  {
                            "foreach":  "@body('Entities_-_Get_Accounts')?['Accounts']",
                            "actions":  {
                                "Condition_2":  {
                                    "actions":  {
                                        "Update_incident":  {
                                            "runAfter":  {
                                            },
                                            "type":  "ApiConnection",
                                            "inputs":  {
                                                "body":  {
                                                    "incidentArmId":  "@body('Alert_-_Get_incident')?['id']",
                                                    "severity":  "High"
                                                },
                                                "host":  {
                                                    "connection":  {
                                                        "name":  "@parameters('$connections')['azuresentinel']['connectionId']"
                                                    }
                                                },
                                                "method":  "put",
                                                "path":  "/Incidents"
                                            }
                                        }
                                    },
                                    "runAfter":  {
                                        "Run_query_and_list_results":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "expression":  {
                                        "and":  [
                                            {
                                                "not":  {
                                                    "equals":  [
                                                        "@length(body('Run_query_and_list_results')?['value'])",
                                                        0
                                                    ]
                                                }
                                            }
                                        ]
                                    },
                                    "type":  "If"
                                },
                                "Get_user":  {
                                    "runAfter":  {
                                    },
                                    "type":  "ApiConnection",
                                    "inputs":  {
                                        "host":  {
                                            "connection":  {
                                                "name":  "@parameters('$connections')['azuread']['connectionId']"
                                            }
                                        },
                                        "method":  "get",
                                        "path":  "/v1.0/users/@{encodeURIComponent(items('Update_severity_if_VIP_user')?['AadUserId'])}"
                                    }
                                },
                                "Run_query_and_list_results":  {
                                    "runAfter":  {
                                        "Get_user":  [
                                            "Succeeded"
                                        ]
                                    },
                                    "type":  "ApiConnection",
                                    "inputs":  {
                                        "body":  "_GetWatchlist('vip_user')\n| where userPrincipalName == \"@{body('Get_user')?['userPrincipalName']}\"\n| where vipUser == \"True\"\n| project userPrincipalName ",
                                        "host":  {
                                            "connection":  {
                                                "name":  "@parameters('$connections')['azuremonitorlogs']['connectionId']"
                                            }
                                        },
                                        "method":  "post",
                                        "path":  "/queryData",
                                        "queries":  {
                                            "resourcegroups":  "cyberlabanformat",
                                            "resourcename":  "AzureSentinelDemo",
                                            "resourcetype":  "Log Analytics Workspace",
                                            "subscriptions":  "7cbf0976-6f14-4eb6-ba26-940c86f9da22",
                                            "timerange":  "1h"
                                        }
                                    }
                                }
                            },
                            "runAfter":  {
                                "Entities_-_Get_Accounts":  [
                                    "Succeeded"
                                ]
                            },
                            "type":  "Foreach"
                        }
                    },
                    "outputs":  {
                    }
                },
                "parameters":  {
                    "$connections":  {
                        "value":  {
                            "azuread":  {
                                "connectionName":  "[variables('azureadConnectionName')]",
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('azureadConnectionName'))]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuread')]"
                            },
                            "azureloganalyticsdatacollector":  {
                                "connectionName":  "[variables('azureloganalyticsdatacollectorConnectionName')]",
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollectorConnectionName'))]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                            },
                            "azuremonitorlogs":  {
                                "connectionName":  "[variables('azuremonitorlogsConnectionName')]",
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogsConnectionName'))]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                            },
                            "azuresentinel":  {
                                "connectionName":  "[variables('azuresentinelConnectionName')]",
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('azuresentinelConnectionName'))]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]",
                                "connectionProperties":  {
                                    "authentication":  {
                                        "type":  "ManagedServiceIdentity"
                                    }
                                }
                            },
                            "office365":  {
                                "connectionName":  "[variables('officeConnectionName')]",
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('officeConnectionName'))]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office')]"
                            },
                            "service-now_1":  {
                                "connectionName":  "[variables('servicenowConnectionName')]",
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('servicenowConnectionName'))]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicenow')]"
                            },
                            "teams":  {
                                "connectionName":  "[variables('teamsConnectionName')]",
                                "connectionId":  "[resourceId('Microsoft.Web/connections', variables('teamsConnectionName'))]",
                                "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/teams')]"
                            }
                        }
                    }
                }
            },
            "name":  "[parameters('PlaybookName')]",
            "type":  "Microsoft.Logic/workflows",
            "location":  "[resourceGroup().location]",
            "tags":  {
                "hidden-SentinelTemplateName":  "Codemotion_SOAR_demo",
                "hidden-SentinelTemplateVersion":  "1.0"
            },
            "identity":  {
                "type":  "SystemAssigned"
            },
            "apiVersion":  "2017-07-01",
            "dependsOn":  [
                "[resourceId('Microsoft.Web/connections', variables('azureadConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('azureloganalyticsdatacollectorConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('azuremonitorlogsConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('azuresentinelConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('officeConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('servicenowConnectionName'))]",
                "[resourceId('Microsoft.Web/connections', variables('teamsConnectionName'))]"
            ]
        },
        {
            "name":  "[variables('azureadConnectionName')]",
            "properties":  {
                "displayName":  "[variables('azureadConnectionName')]",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuread')]"
                },
                "customParameterValues":  {
                }
            },
            "type":  "Microsoft.Web/connections",
            "kind":  "V1",
            "apiVersion":  "2016-06-01",
            "location":  "[resourceGroup().location]"
        },
        {
            "name":  "[variables('azureloganalyticsdatacollectorConnectionName')]",
            "properties":  {
                "displayName":  "[variables('azureloganalyticsdatacollectorConnectionName')]",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azureloganalyticsdatacollector')]"
                },
                "customParameterValues":  {
                }
            },
            "type":  "Microsoft.Web/connections",
            "kind":  "V1",
            "apiVersion":  "2016-06-01",
            "location":  "[resourceGroup().location]"
        },
        {
            "name":  "[variables('azuremonitorlogsConnectionName')]",
            "properties":  {
                "displayName":  "[variables('azuremonitorlogsConnectionName')]",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuremonitorlogs')]"
                },
                "customParameterValues":  {
                }
            },
            "type":  "Microsoft.Web/connections",
            "kind":  "V1",
            "apiVersion":  "2016-06-01",
            "location":  "[resourceGroup().location]"
        },
        {
            "name":  "[variables('azuresentinelConnectionName')]",
            "properties":  {
                "parameterValueType":  "Alternative",
                "displayName":  "[variables('azuresentinelConnectionName')]",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/azuresentinel')]"
                },
                "customParameterValues":  {
                }
            },
            "type":  "Microsoft.Web/connections",
            "kind":  "V1",
            "apiVersion":  "2016-06-01",
            "location":  "[resourceGroup().location]"
        },
        {
            "name":  "[variables('officeConnectionName')]",
            "properties":  {
                "displayName":  "[variables('officeConnectionName')]",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/office')]"
                },
                "customParameterValues":  {
                }
            },
            "type":  "Microsoft.Web/connections",
            "kind":  "V1",
            "apiVersion":  "2016-06-01",
            "location":  "[resourceGroup().location]"
        },
        {
            "name":  "[variables('servicenowConnectionName')]",
            "properties":  {
                "displayName":  "[variables('servicenowConnectionName')]",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/servicenow')]"
                },
                "customParameterValues":  {
                }
            },
            "type":  "Microsoft.Web/connections",
            "kind":  "V1",
            "apiVersion":  "2016-06-01",
            "location":  "[resourceGroup().location]"
        },
        {
            "name":  "[variables('teamsConnectionName')]",
            "properties":  {
                "displayName":  "[variables('teamsConnectionName')]",
                "api":  {
                    "id":  "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Web/locations/', resourceGroup().location, '/managedApis/teams')]"
                },
                "customParameterValues":  {
                }
            },
            "type":  "Microsoft.Web/connections",
            "kind":  "V1",
            "apiVersion":  "2016-06-01",
            "location":  "[resourceGroup().location]"
        }
    ]
}
